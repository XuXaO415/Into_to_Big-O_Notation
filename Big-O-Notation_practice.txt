Simplifying Expressions 

1. O(n+10)
O(n) + O(10)
dropping constants
O(n) => linear time

2. O(100 * n)
O(100) * O(n)
O(n) => linear time

3. O(25)
O(1) constant time => ideal

4. O(n^2 + n^3)
O(n^3) + O(n^2)
O(n^3) => cubic time time

5. O(n + n + n + n)
O(n) => linear time

6. O(1000 * log(n) + n)
O(n) => linear time

7. O(1000 * n * log(n) + n)
O(1000) * O(n) * O(log(n)) + O(n)
O(1000) * (n) * (log(n))
O(n log(n)) => n * log n

8. O(2^n + n^2)
O(2^n) + O(n^2)
O(2^n)  => exponential time 


9. O(5 + 3 + 1)
O(1) => constant time

10. O(n + n^(1/2) + n^2 + n * log(n)^10)
O(n) + O(n^(1/2)) + O(n^2) + O(n) * O(log(n)^10))
O(n*ln(10)/ln(n) + n^2 + n + Sqrt[n])
O(n^2) => exponential time


f(n) = O(g(n))
O(n!) => factorial time 
O(2^n) => exponential time 
O(n^3) => cubic time time
O(n^2) => quadratic time
O(n log n) => n * log n
O(n) => linear time
O(log n) => logarithmic time
O(1) => constant time => ideal

function logUpTo(n) {
  for (let i = 1; i <= n; i++) { // O(n)
    console.log(i); //O(1)
  }
}
logUpTo(5)
// prints 1-5
logUpTo(10)
// prints 1-10
// loop statement => linear => So, time complexity is O(n)

function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) { // O(n)
    console.log(i);
  }
}

logAtLeast(4)
//1-10
//logs at minimum 10
//loop statement => linear => O(n)


function logAtMost10(n) {
  for (let i = 1; i <= Math.min(n, 10); i++) { // O(n)
    console.log(i);
  }
}

//linear => O(n)

function onlyElementsAtEvenIndex(array) {
  let newArray = [];
  for (let i = 0; i < array.length; i++) { 
    if (i % 2 === 0) { 
      newArray.push(array[i]);
    }
  }
  return newArray;
}

//whatever array numbers are passed, array is constant
//O(1) => constant time complexity


function subtotals(array) {
  let subtotalArray = [];
  for (let i = 0; i < array.length; i++) {
    let subtotal = 0;
    for (let j = 0; j <= i; j++) {
      subtotal += array[j];
    }
    subtotalArray.push(subtotal);
  }
  return subtotalArray;
}

//Constant array => O(n) => linear time complexity

function vowelCount(str) {
  let vowelCount = {};
  const vowels = "aeiouAEIOU";

  for (let char of str) {
    if(vowels.includes(char)) {
      if(char in vowelCount) {
        vowelCount[char] += 1;
      } else {
        vowelCount[char] = 1;
      }
    }
  }

  return vowelCount;
}

//O(n^2) => quadratic time
//https://adrianmejia.com/how-to-find-time-complexity-of-an-algorithm-code-big-o-notation/#Recursive-Functions-Statements

//used calculator to attain answers
True or false: n^2 + n is O(n^2).
    O(n^2) + (n) => true

True or false: n^2 * n is O(n^3).
    O(n^2) * (n) => true

True or false: n^2 + n is O(n).
    false

What’s the time complexity of the .indexOf array method?
    -Accessing elements in an array by index will yield a constant time complexity => O(1)

What’s the time complexity of the .includes array method?
  -O(n)

What’s the time complexity of the .forEach array method?
    - O(n)
What’s the time complexity of the .sort array method?
    - O(n log(n))
What’s the time complexity of the .unshift array method?
    - Insert element(s) to the beginning of an array => O(n)
    
What’s the time complexity of the .push array method?
    - O(1). Inserts element at the end an array

What’s the time complexity of the .splice array method?
    - Changes array => O(n)

What’s the time complexity of the .pop array method?
    -Removes an element from the end of an array => O(1)

What’s the time complexity of the Object.keys() function?
    -Accessing elements in an object by key will yield a constant time complexity => O(n)

Bonus

What’s the space complexity of the Object.keys() function?
  - O(n)

*Side note*
Method types that involve [usually] have a Big O of:

  -Insertion are usually O(1) or O(n)
  -Removal => O(1) or O(n)
  -Searching => O(n)
  -Access => O(1)

Methods that have:

  -Object.keys => O(n)
  -Object.values => O(n)
  -Object.entries => O(n)
  -hasOwnProperty => O(1)

And...

  -push => O(1)
  -pop => O(1)
  -shift => O(n)
  -unshift =>O(n)
  -concat => O(n)
  -slice => O(n)
  -splice => O(n)
  -sort => O(n * log n)
  -map => O(n)


READ THIS:
https://tc39.es/ecma262/#sec-array.prototype.unshift
https://learn.co/lessons/big-o-approximation


//https://algs4.cs.princeton.edu/14analysis/
//https://www.bigocheatsheet.com/?ref=hackernoon.com
//https://adrianmejia.com/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/
//https://developerinsider.co/big-o-notation-explained-with-examples/